#!/bin/sh
# Copyleft (C) 2023 spirothXYZ, all rights reserved
REDIR_COMMAND_DEVICE="none"
REDIR_COMMAND_ARGS_ON="1"
REDIR_COMMAND_ARGS_OFF="0"
REDIR_COMMAND_ARGS=$TTY_COMMAND_ARGS_OFF

COMMAND_SESSION_TYPE="tty" # Available options: tty, integrity
COMMAND_SESSION_TOGGLE="auto" # Available options: enable, disable, auto

DEVICE_PATH_PREFIX="/sys/class/leds/input"
DEVICE_PATH_SUFFIX="::scrolllock/brightness"
DEVICE_PATH_COUNT=1
DEVICE_PATH_COUNT_MAX=1000
DEVICE_PATH="${DEVICE_PATH_PREFIX}${DEVICE_PATH_COUNT}${DEVICE_PATH_SUFFIX}"

VERBOSE="no" # Pass -v option to enable verbose logging

_help() {
    echo "Usage: $(basename "$(test -L "$0" && readlink "$0" || echo "$0")") [OPTIONS...]"
    echo
    echo "Options:"
    echo "  -t <STATE>: Specify toggle state of device. Default is \"auto\""
    echo "  -d <PATH>: Specify device path. The default value will be looked up recursively."
    echo "  -i: Test if the script runs without errors, useful for debugging purposes"
    echo "  -v: Enable verbose logging, useful for debugging purposes"
    echo "  -h: View help information"
    exit 0
}

parse_opts() {
    # Parse command-line arguments
    local OPTIND

    while getopts "t:d:ihv" opt; do
        case $opt in
            t)
                COMMAND_SESSION_TOGGLE=$OPTARG

                if [ $OPTARG != "enable" ] && [ $OPTARG != "disable" ] && [ $OPTARG != "auto" ]; then
                    echo "Available arguments for -t: enable, disable, auto"
                    echo "The argument provided for -t is invalid, aborting..."
                    exit 1
                fi
                ;;
            d)
                DEVICE_PATH="${OPTARG}${DEVICE_PATH_SUFFIX}"
                ;;
            i)
                echo "Integrity option enabled, no changes will be applied to the device."
                COMMAND_SESSION_TYPE="integrity"
                VERBOSE="yes" # Verbose logging must be enabled
                ;;
            h)
                _help
                ;;
            v)
                VERBOSE="yes"
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                exit 1
                ;;
            *)
                echo "Option -$OPTARG requires an argument." >&2
                exit 1
                ;;
        esac
    done

    shift $((OPTIND-1))
}

find_device() {
    # Iterate until the correct device is found
    while [ ! -f $DEVICE_PATH ];
    do
        if [ $VERBOSE == "yes" ]; then
            echo "${DEVICE_PATH} does not exist, next."
        fi
        if [ $DEVICE_PATH_COUNT -gt $DEVICE_PATH_COUNT_MAX ]; then
            echo "Device path count has reached it's max limits, stopping."
            break
        fi

        DEVICE_PATH_COUNT=$((DEVICE_PATH_COUNT + 1))
        DEVICE_PATH="${DEVICE_PATH_PREFIX}${DEVICE_PATH_COUNT}${DEVICE_PATH_SUFFIX}"
    done

    # If the device hasn't been resolved, then exit.
    if [ ! -f $DEVICE_PATH ]; then
        echo "No suitable device found." >&2
        exit 1
    elif [ -f $DEVICE_PATH ] && [ $VERBOSE == "yes" ]; then
        echo "${DEVICE_PATH} found."
    fi
}

change_state() {
    # Set REDIR_COMMAND_DEVICE to device path
    REDIR_COMMAND_DEVICE=$DEVICE_PATH

    if [ $COMMAND_SESSION_TOGGLE == "auto" ]; then
        # Read the value of device's brightness file to determine state
        DEVICE_BRIGHTNESS_STATE=$(cat $DEVICE_PATH)

        # Turn on/off LED backlight of the device based on the determined state
        if [ $DEVICE_BRIGHTNESS_STATE -lt 1 ]; then
            # LED backlight is turned off, turn it on.
            if [ $VERBOSE == "yes" ]; then
                echo "Value returned 0 from ${DEVICE_PATH}"
                echo "Setting value 1 to ${DEVICE_PATH}"
            fi

            REDIR_COMMAND_ARGS=$REDIR_COMMAND_ARGS_ON
        elif [ $DEVICE_BRIGHTNESS_STATE -gt 0 ]; then
            # LED backlight is already turned on, turn it off.
            if [ $VERBOSE == "yes" ]; then
                echo "Value returned 1 from ${DEVICE_PATH}"
                echo "Setting value 0 to ${DEVICE_PATH}"
            fi

            REDIR_COMMAND_ARGS=$REDIR_COMMAND_ARGS_OFF
        fi
    elif [ $COMMAND_SESSION_TOGGLE == "enable" ]; then
        # Forcefully enable LED backlight
        REDIR_COMMAND_ARGS=$REDIR_COMMAND_ARGS_ON
    elif [ $COMMAND_SESSION_TOGGLE == "disable" ]; then
        # Forcefully disable LED backlight
        REDIR_COMMAND_ARGS=$REDIR_COMMAND_ARGS_OFF
    fi
}

apply() {
    # Apply changes to the device depending on the command
    if [ $COMMAND_SESSION_TYPE == "tty" ]; then
    	if [ $VERBOSE == "yes" ]; then
        	echo "Checking root privileges..."
        fi
        if [ $(id -u) -gt 0 ]; then
        	echo "This action requires root privileges." >&2
        	exit 1
    	fi
    	
        echo ${REDIR_COMMAND_ARGS} > ${REDIR_COMMAND_DEVICE}
    elif [ $COMMAND_SESSION_TYPE == "integrity" ]; then
        echo "Integrity check reached end-of-line."
    else
        exit 1
    fi
}

parse_opts $@
find_device
change_state
apply
