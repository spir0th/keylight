#!/bin/sh
# keylight - A small shell script that turns on/off keyboard backlights.
# Copyleft (C) 2023 spirothXYZ, all rights reserved
REDIR_COMMAND_DEVICE="none"
REDIR_COMMAND_ARGS_ON="1"
REDIR_COMMAND_ARGS_OFF="0"
REDIR_COMMAND_ARGS=$TTY_COMMAND_ARGS_OFF

X11_COMMAND_INDEX="3"
X11_COMMAND_ARGS_ON="led"
X11_COMMAND_ARGS_OFF="-led"
X11_COMMAND_ARGS=$TTY_COMMAND_ARGS_OFF

COMMAND="x11" # Available commands are: x11, redir, none

DEVICE_PATH_PREFIX="/sys/class/leds/input"
DEVICE_PATH_SUFFIX="::scrolllock/brightness"
DEVICE_PATH_COUNT=1
DEVICE_PATH_COUNT_MAX=1000
DEVICE_PATH="${DEVICE_PATH_PREFIX}${DEVICE_PATH_COUNT}${DEVICE_PATH_SUFFIX}"

ARGS="$@"
VERBOSE="no" # Pass --v or --verbose options to enable verbose logging

_redir_check_sudo() {
    # This is a function used by the redir command, it checks for root privileges.
    if [ $VERBOSE == "yes" ]; then
        echo "Checking root privileges..."
    fi
    if [ $(id -u) -gt 0 ]; then
        echo "This action requires root privileges."
        exit 1
    fi
}

detect_session_type() {
    if [ -z $XDG_SESSION_TYPE ] || [ $XDG_SESSION_TYPE != "x11" ]; then
        # Xorg is not running / not installed
        # Force COMMAND to use echo redirection instead of xset
        echo "Xorg is not running or not installed, echo redirection will be used instead."
        COMMAND="redir"
    fi
}

parse_args() {
    # Parse command-line arguments
    for i in $ARGS; do
        if [ $i == "--redir" ]; then
            COMMAND="redir"
        fi
        if [ $i == "--testing" ]; then
            COMMAND="none"
        fi
        if [ $i == "-h" ] || [ $i == "--help" ]; then
            echo "Usage: $(basename "$(test -L "$0" && readlink "$0" || echo "$0")") [OPTIONS...] "
            echo
            echo "Options:"
            echo "  --redir: Use echo redirection to toggle backlight"
            echo "  --testing: Verify script integrity, used for checking errors"
            echo "  --help: Print help information then exit"
            echo "  --verbose: Show detailed information for debugging purposes"
            exit 0
        fi
        if [ $i == "-v" ] || [ $i == "--verbose" ]; then
            VERBOSE="yes"
        fi
    done
}

find_device() {
    # Iterate until the correct device path is found
    while [ ! -f $DEVICE_PATH ];
    do
        if [ $VERBOSE == "yes" ]; then
            echo "${DEVICE_PATH} does not exist, next."
        fi
        if [ $DEVICE_PATH_COUNT -gt $DEVICE_PATH_COUNT_MAX ]; then
            echo "Device path count has reached it's max limits, stopping."
            break
        fi

        DEVICE_PATH_COUNT=$((DEVICE_PATH_COUNT + 1))
        DEVICE_PATH="${DEVICE_PATH_PREFIX}${DEVICE_PATH_COUNT}${DEVICE_PATH_SUFFIX}"
    done

    # If the device hasn't been resolved, then exit.
    if [ ! -f $DEVICE_PATH ]; then
        echo "No suitable device found."
        exit 1
    elif [ -f $DEVICE_PATH ] && [ $VERBOSE == "yes" ]; then
        echo "${DEVICE_PATH} found."
    fi
}

change_state() {
    # Read the value of device's brightness file to determine state
    DEVICE_BRIGHTNESS_STATE=$(cat $DEVICE_PATH)

    # Set REDIR_COMMAND_DEVICE to device path
    REDIR_COMMAND_DEVICE=$DEVICE_PATH

    # Turn on/off LED backlight of the device depending on the brightness state
    if [ $DEVICE_BRIGHTNESS_STATE -lt 1 ]; then
        # LED backlight is turned off, turn it on.
        if [ $VERBOSE == "yes" ]; then
            echo "Value returned 0 from ${DEVICE_PATH}"
            echo "Setting value 1 to ${DEVICE_PATH}"
        fi

        REDIR_COMMAND_ARGS=$REDIR_COMMAND_ARGS_ON
        X11_COMMAND_ARGS=$X11_COMMAND_ARGS_ON
    elif [ $DEVICE_BRIGHTNESS_STATE -gt 0 ]; then
        # LED backlight is already turned on, turn it off.
        if [ $VERBOSE == "yes" ]; then
            echo "Value returned 1 from ${LED_PATH}"
            echo "Setting value 0 to ${LED_PATH}"
        fi

        REDIR_COMMAND_ARGS=$REDIR_COMMAND_ARGS_OFF
        X11_COMMAND_ARGS=$X11_COMMAND_ARGS_OFF
    fi
}

apply() {
    # Apply changes to the device depending on the command
    if [ $COMMAND == "x11" ]; then
        xset ${X11_COMMAND_ARGS} ${X11_COMMAND_INDEX}
    elif [ $COMMAND == "redir" ]; then
        _redir_check_sudo
        echo ${REDIR_COMMAND_ARGS} > ${REDIR_COMMAND_DEVICE}
    else
        echo "Script test successful. No errors occurred."
        exit 0
    fi
}

detect_session_type
parse_args
find_device
change_state
apply
